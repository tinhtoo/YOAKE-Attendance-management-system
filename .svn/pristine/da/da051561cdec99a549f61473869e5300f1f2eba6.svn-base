<?php

namespace App\Http\Controllers\Work_Time;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests\WorkTimeDeptEditorRequest;
use App\Repositories\Work_Time\WorkTimeDeptEditorRepository;
use App\Filters\WorkTimeDeptEditorFilter;
use App\Repositories\MT93PgRepository;
use App\Repositories\MT05WorkptnRepository;
use App\Repositories\MT23CompanyRepository;
use App\Repositories\MT09ReasonRepository;
use App\Repositories\MT94WorkDescRepository;
use App\Http\Requests\WorkTimeUpdateRequest;
use App\Repositories\Work_Time\WorkTimeRepository;
use App\Models\TR01Work;

class WorkTimeDeptEditorController extends Controller
{
    protected $wtimedepedit_Repository;
    protected $mt05_workptn;
    protected $mt23_company;
    protected $mt09_reason;
    protected $work_desc;
    protected $wtime_Repository;

    /**
     * コントローラインスタンスの生成
     * @param  
     * @return void
     */
    public function __construct(WorkTimeDeptEditorRepository $wtimedepedit_Repository,
                                MT93PgRepository $pg_repository,
                                MT05WorkptnRepository $mt05_workptn_rep,
                                MT23CompanyRepository $mt23_company_rep,
                                MT09ReasonRepository $mt09_reason_rep,
                                MT94WorkDescRepository $work_desc_repository,
                                WorkTimeRepository $wtime_Repository
                                )
    {
        parent::__construct($pg_repository, '010005');
        $this->wtimedepedit_Repository = $wtimedepedit_Repository;
        $this->mt05_workptn = $mt05_workptn_rep;
        $this->mt23_company = $mt23_company_rep;
        $this->mt09_reason = $mt09_reason_rep;
        $this->work_desc = $work_desc_repository;
        $this->wtime_Repository = $wtime_Repository;
    }

    /**
     * 出退勤入力(部門別) 画面表示
     * @return view
     */
    public function WorkTimeDeptEditor(Request $request)
    {
        $haken_company = $this->mt23_company->getDisp(); //会社所属情報
        $ovtm_header_names = $this->work_desc->getOvtms()->toArray(); // テーブルヘッダー（残業）
        $ext_header_names = $this->work_desc->getExts()->toArray(); // テーブルヘッダー（割増）
        $inputSearchData['txtDeptCd'] = session('dept_cd'); //部門コード
        $is_index = true;

        return parent::viewWithMenu('work_time.WorkTimeDeptEditor', compact('haken_company', 'ovtm_header_names', 'ext_header_names', 'inputSearchData', 'is_index'));
    }

    /**
     * 指定部門の詳細データの表示
     * @param $request
     * @return Response
     */
    public function search(WorkTimeDeptEditorRequest $request, WorkTimeDeptEditorFilter $filter)
    {
        $inputSearchData = $request->all();
        $filterData = $inputSearchData['filter'];

        $results = $this->wtimedepedit_Repository->select($request, $filter); // 対象データ検索
        $haken_company = $this->mt23_company->getDisp(); // 会社所属情報
        $workptn_names = $this->mt05_workptn->workptnsNormal(); // 勤務体系
        $reason_names = $this->mt09_reason->reasons(); // 事由

        $ovtm_header_names = $this->work_desc->getOvtms()->toArray(); // テーブルヘッダー（残業）
        $ext_header_names = $this->work_desc->getExts()->toArray(); // テーブルヘッダー（割増）
        
        $request->session()->put('ymd_date', $inputSearchData['ddlDate']); //対象年月日
        $request->session()->put('dept_cd', $inputSearchData['txtDeptCd']); //部門コード

        return parent::viewWithMenu('work_time.WorkTimeDeptEditor', compact('inputSearchData', 'filterData', 'results', 'haken_company',
                                                                            'workptn_names', 'reason_names', 'ovtm_header_names', 'ext_header_names'));
    }

    /**
     * 時間計算処理
     *
     * @param Request $request
     * @return 時間計算データ
     */
    public function timeCal(Request $request)
    {
        $results = $this->wtime_Repository->timeCal($request); // 対象データ表示
        return $results;
    }

    /**
     * 日数計算処理
     *
     * @param Request $request
     * @return 日数計算データ
     */
    public function dayCal(Request $request)
    {
        $results = $this->wtime_Repository->dayCal($request); // 対象データ表示
        return $results;
    }    

    /**
     * 更新処理
     *
     * @param Request $request
     * @return TR01_Work
     */
    public function update(Request $request)
    {
        $today = date('Y-m-d H:i:s');
        $wk01_data = $this->wtimedepedit_Repository->getWk01Work($request)->unique('CALD_YEAR');
        $dept_cd = $wk01_data->pluck('DEPT_CD');
        $year = $wk01_data->pluck('CALD_YEAR');
        $month = $wk01_data->pluck('CALD_MONTH');
        $input_year = substr(session('ymd_date'), 0, 4);
        $input_month = substr(session('ymd_date'), 7, 2);
        $input_day = mb_substr(session('ymd_date'), 8, 2);
        $date = $input_year . '-' . $input_month . '-' . $input_day;

        $update_records = $this->update_records($request, $dept_cd, $year, $month, $date, $today);
        foreach ($update_records as $record) {
            TR01Work::upsert($record, ['EMP_CD', 'CALD_DATE'], $this->udpate_cols());
        }
        return redirect()->route('wtde.search');
    }

    private function update_records($request, $dept_cd, $cald_year, $cald_month, $date, $today) {
        $update_records = [];
        $wk01_records = $this->wtimedepedit_Repository
                    ->getWithEmpAndYearMonthDate($dept_cd, $cald_year, $cald_month, $date)
                    ->pluck(null, "EMP_CD");
        foreach ($request->input('worktime') as $index => $data) {
            $wk01_record = $wk01_records[$data['EMP_CD']];
            $record = [
                'EMP_CD' => $data['EMP_CD'],
                'CALD_DATE' => $wk01_record->CALD_DATE,
                'WORKPTN_CD' => $data['WORKPTN_CD'],
                'WORKPTN_STR_TIME' => $wk01_record->WORKPTN_STR_TIME,
                'WORKPTN_END_TIME' => $wk01_record->WORKPTN_END_TIME,
                'REASON_CD' => $data['REASON_CD'],
                'OFC_TIME_HH' => !empty($data['OFC_TIME']) ? explode(":", $data['OFC_TIME'])[0] : 0,
                'OFC_TIME_MI' => !empty($data['OFC_TIME']) ? explode(":", $data['OFC_TIME'])[1] : 0,
                'OFC_CNT' => $wk01_record->OFC_CNT,
                'LEV_TIME_HH' => !empty($data['LEV_TIME']) ? explode(":", $data['LEV_TIME'])[0] : 0,
                'LEV_TIME_MI' => !empty($data['LEV_TIME']) ? explode(":", $data['LEV_TIME'])[1] : 0,
                'LEV_CNT' => $wk01_record->LEV_CNT,
                'OUT1_TIME_HH' => !empty($data['OUT1_TIME']) ? explode(":", $data['OUT1_TIME'])[0] : 0,
                'OUT1_TIME_MI' => !empty($data['OUT1_TIME']) ? explode(":", $data['OUT1_TIME'])[1] : 0,
                'OUT1_CNT' => $wk01_record->OUT1_CNT,
                'IN1_TIME_HH' => !empty($data['IN1_TIME']) ? explode(":", $data['IN1_TIME'])[0] : 0,
                'IN1_TIME_MI' => !empty($data['IN1_TIME']) ? explode(":", $data['IN1_TIME'])[1] : 0,
                'IN1_CNT' => $wk01_record->IN1_CNT,
                'OUT2_TIME_HH' => !empty($data['OUT2_TIME']) ? explode(":", $data['OUT2_TIME'])[0] : 0,
                'OUT2_TIME_MI' => !empty($data['OUT2_TIME']) ? explode(":", $data['OUT2_TIME'])[1] : 0,
                'OUT2_CNT' => $wk01_record->OUT2_CNT,
                'IN2_TIME_HH' => !empty($data['IN2_TIME']) ? explode(":", $data['IN2_TIME'])[0] : 0,
                'IN2_TIME_MI' => !empty($data['IN2_TIME']) ? explode(":", $data['IN2_TIME'])[1] : 0,
                'IN2_CNT' => $wk01_record->IN2_CNT,
                'WORK_TIME_HH' => !empty($data['WORK_TIME']) ? explode(":", $data['WORK_TIME'])[0] : 0,
                'WORK_TIME_MI' => !empty($data['WORK_TIME']) ? explode(":", $data['WORK_TIME'])[1] : 0,
                'TARD_TIME_HH' => !empty($data['TARD_TIME']) ? explode(":", $data['TARD_TIME'])[0] : 0,
                'TARD_TIME_MI' => !empty($data['TARD_TIME']) ? explode(":", $data['TARD_TIME'])[1] : 0,
                'LEAVE_TIME_HH' => !empty($data['LEAVE_TIME']) ? explode(":", $data['LEAVE_TIME'])[0] : 0,
                'LEAVE_TIME_MI' => !empty($data['LEAVE_TIME']) ? explode(":", $data['LEAVE_TIME'])[1] : 0,
                'OUT_TIME_HH' => !empty($data['OUT_TIME']) ? explode(":", $data['OUT_TIME'])[0] : 0,
                'OUT_TIME_MI' => !empty($data['OUT_TIME']) ? explode(":", $data['OUT_TIME'])[1] : 0,
                'OVTM1_TIME_HH' => !empty($data['OVTM1_TIME']) ? explode(":", $data['OVTM1_TIME'])[0] : 0,
                'OVTM1_TIME_MI' => !empty($data['OVTM1_TIME']) ? explode(":", $data['OVTM1_TIME'])[1] : 0,
                'OVTM2_TIME_HH' => !empty($data['OVTM2_TIME']) ? explode(":", $data['OVTM2_TIME'])[0] : 0,
                'OVTM2_TIME_MI' => !empty($data['OVTM2_TIME']) ? explode(":", $data['OVTM2_TIME'])[1] : 0,
                'OVTM3_TIME_HH' => !empty($data['OVTM3_TIME']) ? explode(":", $data['OVTM3_TIME'])[0] : 0,
                'OVTM3_TIME_MI' => !empty($data['OVTM3_TIME']) ? explode(":", $data['OVTM3_TIME'])[1] : 0,
                'OVTM4_TIME_HH' => !empty($data['OVTM4_TIME']) ? explode(":", $data['OVTM4_TIME'])[0] : 0,
                'OVTM4_TIME_MI' => !empty($data['OVTM4_TIME']) ? explode(":", $data['OVTM4_TIME'])[1] : 0,
                'OVTM5_TIME_HH' => !empty($data['OVTM5_TIME']) ? explode(":", $data['OVTM5_TIME'])[0] : 0,
                'OVTM5_TIME_MI' => !empty($data['OVTM5_TIME']) ? explode(":", $data['OVTM5_TIME'])[1] : 0,
                'OVTM6_TIME_HH' => !empty($data['OVTM6_TIME']) ? explode(":", $data['OVTM6_TIME'])[0] : 0,
                'OVTM6_TIME_MI' => !empty($data['OVTM6_TIME']) ? explode(":", $data['OVTM6_TIME'])[1] : 0,
                'OVTM7_TIME_HH' => $wk01_record->OVTM7_TIME_HH,
                'OVTM7_TIME_MI' => $wk01_record->OVTM7_TIME_MI,
                'OVTM8_TIME_HH' => $wk01_record->OVTM8_TIME_HH,
                'OVTM8_TIME_MI' => $wk01_record->OVTM8_TIME_MI,
                'OVTM9_TIME_HH' => $wk01_record->OVTM9_TIME_HH,
                'OVTM9_TIME_MI' => $wk01_record->OVTM9_TIME_MI,
                'OVTM10_TIME_HH' => $wk01_record->OVTM10_TIME_HH,
                'OVTM10_TIME_MI' => $wk01_record->OVTM10_TIME_MI,
                'EXT1_TIME_HH' => !empty($data['EXT1_TIME']) ? explode(":", $data['EXT1_TIME'])[0] : 0,
                'EXT1_TIME_MI' => !empty($data['EXT1_TIME']) ? explode(":", $data['EXT1_TIME'])[1] : 0,
                'EXT2_TIME_HH' => !empty($data['EXT2_TIME']) ? explode(":", $data['EXT2_TIME'])[0] : 0,
                'EXT2_TIME_MI' => !empty($data['EXT2_TIME']) ? explode(":", $data['EXT2_TIME'])[1] : 0,
                'EXT3_TIME_HH' => !empty($data['EXT3_TIME']) ? explode(":", $data['EXT3_TIME'])[0] : 0,
                'EXT3_TIME_MI' => !empty($data['EXT3_TIME']) ? explode(":", $data['EXT3_TIME'])[1] : 0,
                'EXT4_TIME_HH' => $wk01_record->EXT4_TIME_HH,
                'EXT4_TIME_MI' => $wk01_record->EXT4_TIME_MI,
                'EXT5_TIME_HH' => $wk01_record->EXT5_TIME_HH,
                'EXT5_TIME_MI' => $wk01_record->EXT5_TIME_MI,
                'RSV1_TIME_HH' => $wk01_record->RSV1_TIME_HH,
                'RSV1_TIME_MI' => $wk01_record->RSV1_TIME_MI,
                'RSV2_TIME_HH' => $wk01_record->RSV2_TIME_HH,
                'RSV2_TIME_MI' => $wk01_record->RSV2_TIME_MI,
                'RSV3_TIME_HH' => $wk01_record->RSV3_TIME_HH,
                'RSV3_TIME_MI' => $wk01_record->RSV3_TIME_MI,
                'WORKDAY_CNT' => $wk01_record->WORKDAY_CNT,
                'HOLWORK_CNT' => $wk01_record->HOLWORK_CNT,
                'SPCHOL_CNT' => $wk01_record->SPCHOL_CNT,
                'PADHOL_CNT' => $wk01_record->PADHOL_CNT,
                'ABCWORK_CNT' => $wk01_record->ABCWORK_CNT,
                'COMPDAY_CNT' => $wk01_record->COMPDAY_CNT,
                'RSV1_CNT' => $wk01_record->RSV1_CNT,
                'RSV2_CNT' => $wk01_record->RSV2_CNT,
                'RSV3_CNT' => $wk01_record->RSV3_CNT,
                'UPD_CLS_CD' => $wk01_record->UPD_CLS_CD,
                'FIX_CLS_CD' => $wk01_record->FIX_CLS_CD,
                'RSV1_CLS_CD' => $wk01_record->RSV1_CLS_CD,
                'RSV2_CLS_CD' => $wk01_record->RSV2_CLS_CD,
                'ADD_DATE' => $today,
                'UPD_DATE' => $today,
                'REMARK' => $data['REMARK'] ?? "",
                'SUBHOL_CNT' => $wk01_record->SUBHOL_CNT,
                'SUBWORK_CNT' => $wk01_record->SUBWORK_CNT
            ];
            $update_records[floor($index/10)][] = $record;
        }
        return $update_records;
    }

    private function udpate_cols() {
        return [
            'WORKPTN_CD',
            'WORKPTN_STR_TIME',
            'WORKPTN_END_TIME',
            'REASON_CD',
            'OFC_TIME_HH',
            'OFC_TIME_MI',
            'OFC_CNT',
            'LEV_TIME_HH',
            'LEV_TIME_MI',
            'LEV_CNT',
            'OUT1_TIME_HH',
            'OUT1_TIME_MI',
            'OUT1_CNT',
            'IN1_TIME_HH',
            'IN1_TIME_MI',
            'IN1_CNT',
            'OUT2_TIME_HH',
            'OUT2_TIME_MI',
            'OUT2_CNT',
            'IN2_TIME_HH',
            'IN2_TIME_MI',
            'IN2_CNT',
            'WORK_TIME_HH',
            'WORK_TIME_MI',
            'TARD_TIME_HH',
            'TARD_TIME_MI',
            'LEAVE_TIME_HH',
            'LEAVE_TIME_MI',
            'OUT_TIME_HH',
            'OUT_TIME_MI',
            'OVTM1_TIME_HH',
            'OVTM1_TIME_MI',
            'OVTM2_TIME_HH',
            'OVTM2_TIME_MI',
            'OVTM3_TIME_HH',
            'OVTM3_TIME_MI',
            'OVTM4_TIME_HH',
            'OVTM4_TIME_MI',
            'OVTM5_TIME_HH',
            'OVTM5_TIME_MI',
            'OVTM6_TIME_HH',
            'OVTM6_TIME_MI',
            'OVTM7_TIME_HH',
            'OVTM7_TIME_MI',
            'OVTM8_TIME_HH',
            'OVTM8_TIME_MI',
            'OVTM9_TIME_HH',
            'OVTM9_TIME_MI',
            'OVTM10_TIME_HH',
            'OVTM10_TIME_MI',
            'EXT1_TIME_HH',
            'EXT1_TIME_MI',
            'EXT2_TIME_HH',
            'EXT2_TIME_MI',
            'EXT3_TIME_HH',
            'EXT3_TIME_MI',
            'EXT4_TIME_HH',
            'EXT4_TIME_MI',
            'EXT5_TIME_HH',
            'EXT5_TIME_MI',
            'RSV1_TIME_HH',
            'RSV1_TIME_MI',
            'RSV2_TIME_HH',
            'RSV2_TIME_MI',
            'RSV3_TIME_HH',
            'RSV3_TIME_MI',
            'WORKDAY_CNT',
            'HOLWORK_CNT',
            'SPCHOL_CNT',
            'PADHOL_CNT',
            'ABCWORK_CNT',
            'COMPDAY_CNT',
            'RSV1_CNT',
            'RSV2_CNT',
            'RSV3_CNT',
            'UPD_CLS_CD',
            'FIX_CLS_CD',
            'RSV1_CLS_CD',
            'RSV2_CLS_CD',
            'ADD_DATE',
            'UPD_DATE',
            'REMARK',
            'SUBHOL_CNT',
            'SUBWORK_CNT'
        ];
    }

    public function cancel(Request $request)
    {
        $data = $request->session()->all();

        if(!empty($data['dept_cd'])){
            $request->session()->forget('dept_cd');
        }
        if(!empty($data['ymd_date'])){
            return redirect()->back()->with('ymd_date', $data['ymd_date']);
        }else{
            return redirect()->back();
        }
    }

}