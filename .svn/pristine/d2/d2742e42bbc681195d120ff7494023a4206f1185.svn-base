<?php

namespace App\Http\Controllers\Work_Time;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests\WorkTimeDeptEditorRequest;
use App\Repositories\Work_Time\WorkTimeDeptEditorRepository;
use App\Filters\WorkTimeDeptEditorFilter;
use App\Repositories\MT93PgRepository;
use App\Repositories\MT05WorkptnRepository;
use App\Repositories\MT23CompanyRepository;
use App\Repositories\MT09ReasonRepository;
use App\Repositories\MT94WorkDescRepository;
use App\Http\Requests\WorkTimeUpdateRequest;
use App\Repositories\Work_Time\WorkTimeRepository;
use App\Models\TR01Work;
use App\Repositories\TR01WorkRepository;
use Carbon\Carbon;

class WorkTimeDeptEditorController extends Controller
{
    protected $wtimedept_rep;
    protected $mt05_workptn;
    protected $mt23_company;
    protected $mt09_reason;
    protected $work_desc;
    protected $wtime_repository;
    protected $tr01;

    /**
     * コントローラインスタンスの生成
     * @param
     * @return void
     */
    public function __construct(
        WorkTimeDeptEditorRepository $wtimedept_rep,
        MT93PgRepository $pg_repository,
        MT05WorkptnRepository $mt05_workptn_rep,
        MT23CompanyRepository $mt23_company_rep,
        MT09ReasonRepository $mt09_reason_rep,
        MT94WorkDescRepository $work_desc_repository,
        WorkTimeRepository $wtime_repository,
        TR01WorkRepository $work_repository
    ) {
        parent::__construct($pg_repository, '010005');
        $this->wtimedept_rep = $wtimedept_rep;
        $this->mt05_workptn = $mt05_workptn_rep;
        $this->mt23_company = $mt23_company_rep;
        $this->mt09_reason = $mt09_reason_rep;
        $this->work_desc = $work_desc_repository;
        $this->wtime_repository = $wtime_repository;
        $this->tr01 = $work_repository;
    }

    /**
     * 出退勤入力(部門別) 画面表示
     * @return view
     */
    public function workTimeDeptEditor(Request $request)
    {
        $haken_company = $this->mt23_company->getDisp(); // 会社所属情報
        $ovtm_header_names = $this->work_desc->getOvtms()->toArray(); // テーブルヘッダー（残業）
        $ext_header_names = $this->work_desc->getExts()->toArray(); // テーブルヘッダー（割増）
        $input_search_data['txtDeptCd'] = session('dept_cd'); // 部門コード
        $is_index = true;

        return parent::viewWithMenu('work_time.WorkTimeDeptEditor', compact(
            'haken_company',
            'ovtm_header_names',
            'ext_header_names',
            'input_search_data',
            'is_index'
        ));
    }

    /**
     * 指定部門の詳細データの表示
     * @param $request
     * @return Response
     */
    public function search(WorkTimeDeptEditorRequest $request, WorkTimeDeptEditorFilter $filter)
    {
        $input_search_data = $request->all();
        $filterData = $input_search_data['filter'];

        $results = $this->wtimedept_rep->select($request, $filter); // 対象データ検索
        $haken_company = $this->mt23_company->getDisp(); // 会社所属情報
        $workptn_names = $this->mt05_workptn->workptnsNormal(); // 勤務体系
        $reason_names = $this->mt09_reason->reasons(); // 事由

        $ovtm_header_names = $this->work_desc->getOvtms()->toArray(); // テーブルヘッダー（残業）
        $ext_header_names = $this->work_desc->getExts()->toArray(); // テーブルヘッダー（割増）

        $request->session()->put('ymd_date', $input_search_data['ddlDate']); // 対象年月日
        $request->session()->put('dept_cd', $input_search_data['txtDeptCd']); // 部門コード

        return parent::viewWithMenu('work_time.WorkTimeDeptEditor', compact(
            'input_search_data',
            'filterData',
            'results',
            'haken_company',
            'workptn_names',
            'reason_names',
            'ovtm_header_names',
            'ext_header_names'
        ));
    }

    /**
     * 時間計算処理
     *
     * @param Request $request
     * @return 時間計算データ
     */
    public function timeCal(Request $request)
    {
        $results = $this->wtime_repository->timeCal($request->all()); // 対象データ表示
        return $results;
    }

    /**
     * 日数計算処理
     *
     * @param Request $request
     * @return 日数計算データ
     */
    public function dayCal(Request $request)
    {
        $results = $this->wtime_repository->dayCal($request); // 対象データ表示
        return $results;
    }

    /**
     * 更新処理
     *
     * @param Request $request
     * @return TR01_Work
     */
    public function update(Request $request)
    {
        $today = date('Y-m-d H:i:s');
        $input_year = substr(session('ymd_date'), 0, 4);
        $input_month = substr(session('ymd_date'), 7, 2);
        $input_day = mb_substr(session('ymd_date'), 8, 2);
        $date = $input_year . '-' . $input_month . '-' . $input_day;

        try {
            \DB::beginTransaction();
            $this->updateRecords($request, $date, $today);
            \DB::commit();
        } catch (\Throwable $e) {
            \Log::debug($e);
            \DB::rollBack();
        }
        return redirect()->route('wtde.search');
    }

    private function updateRecords($request, $date, $today)
    {
        $emp_cd_list = array_column($request->input('worktime'), 'EMP_CD');

        $tr01_records = $this->wtimedept_rep
                    ->getWithEmpsAndDate($emp_cd_list, $date)
                    ->pluck(null, "EMP_CD");

        $update_records = [];
        foreach ($request->input('worktime') as $index => $data) {
            // 更新前データを取得
            $tr01_record = $tr01_records[$data['EMP_CD']];

            // 時間計算、日数計算を実行
            $data['CALD_DATE'] = $date;
            $cald_work = $this->wtime_repository->timeCal($data);
            $cald_work = $this->wtime_repository->dayCal($data, $cald_work);

            $record = [
                'EMP_CD' => $cald_work['EMP_CD'],
                'CALD_DATE' => $cald_work->CALD_DATE,
                'WORKPTN_CD' => $cald_work['WORKPTN_CD'],
                'WORKPTN_STR_TIME' => $cald_work->WORKPTN_STR_TIME,
                'WORKPTN_END_TIME' => $cald_work->WORKPTN_END_TIME,
                'REASON_CD' => $cald_work['REASON_CD'],
                'OFC_TIME_HH' => !is_nullorempty($cald_work['OFC_TIME_HH']) ? $cald_work['OFC_TIME_HH'] : null,
                'OFC_TIME_MI' => !is_nullorempty($cald_work['OFC_TIME_HH']) ? $cald_work['OFC_TIME_MI'] : null,
                'OFC_CNT' => is_nullorempty($cald_work['OFC_TIME_HH']) ? (int) $cald_work['OFC_CNT'] : 1,
                'LEV_TIME_HH' => !is_nullorempty($cald_work['LEV_TIME_HH']) ? $cald_work['LEV_TIME_HH'] : null,
                'LEV_TIME_MI' => !is_nullorempty($cald_work['LEV_TIME_HH']) ? $cald_work['LEV_TIME_MI'] : null,
                'LEV_CNT' => is_nullorempty($cald_work['LEV_TIME_HH']) ? (int) $cald_work['LEV_CNT'] : 1,
                'OUT1_TIME_HH' => !is_nullorempty($cald_work['OUT1_TIME_HH']) ? $cald_work['OUT1_TIME_HH'] : null,
                'OUT1_TIME_MI' => !is_nullorempty($cald_work['OUT1_TIME_HH']) ? $cald_work['OUT1_TIME_MI'] : null,
                'OUT1_CNT' => is_nullorempty($cald_work['OUT1_TIME_HH']) ? (int) $cald_work['OUT1_CNT'] : 1,
                'IN1_TIME_HH' => !is_nullorempty($cald_work['IN1_TIME_HH']) ? $cald_work['IN1_TIME_HH'] : null,
                'IN1_TIME_MI' => !is_nullorempty($cald_work['IN1_TIME_HH']) ? $cald_work['IN1_TIME_MI'] : null,
                'IN1_CNT' => is_nullorempty($cald_work['IN1_TIME_HH']) ? (int) $cald_work['IN1_CNT'] : 1,
                'OUT2_TIME_HH' => !is_nullorempty($cald_work['OUT2_TIME_HH']) ? $cald_work['OUT2_TIME_HH'] : null,
                'OUT2_TIME_MI' => !is_nullorempty($cald_work['OUT2_TIME_HH']) ? $cald_work['OUT2_TIME_MI'] : null,
                'OUT2_CNT' => is_nullorempty($cald_work['OUT2_TIME_HH']) ? (int) $cald_work['OUT2_CNT'] : 1,
                'IN2_TIME_HH' => !is_nullorempty($cald_work['IN2_TIME_HH']) ? $cald_work['IN2_TIME_HH'] : null,
                'IN2_TIME_MI' => !is_nullorempty($cald_work['IN2_TIME_HH']) ? $cald_work['IN2_TIME_MI'] : null,
                'IN2_CNT' => is_nullorempty($cald_work['IN2_TIME_HH']) ? (int) $cald_work['IN2_CNT'] : 1,
                'WORK_TIME_HH' => !is_nullorempty($cald_work['WORK_TIME_HH']) ? $cald_work['WORK_TIME_HH'] : 0,
                'WORK_TIME_MI' => !is_nullorempty($cald_work['WORK_TIME_HH']) ? $cald_work['WORK_TIME_MI'] : 0,
                'TARD_TIME_HH' => !is_nullorempty($cald_work['TARD_TIME_HH']) ? $cald_work['TARD_TIME_HH'] : 0,
                'TARD_TIME_MI' => !is_nullorempty($cald_work['TARD_TIME_HH']) ? $cald_work['TARD_TIME_MI'] : 0,
                'LEAVE_TIME_HH' => !is_nullorempty($cald_work['LEAVE_TIME_HH']) ? $cald_work['LEAVE_TIME_HH'] : 0,
                'LEAVE_TIME_MI' => !is_nullorempty($cald_work['LEAVE_TIME_HH']) ? $cald_work['LEAVE_TIME_MI'] : 0,
                'OUT_TIME_HH' => !is_nullorempty($cald_work['OUT_TIME_HH']) ? $cald_work['OUT_TIME_HH'] : 0,
                'OUT_TIME_MI' => !is_nullorempty($cald_work['OUT_TIME_HH']) ? $cald_work['OUT_TIME_MI'] : 0,
                'OVTM1_TIME_HH' => !is_nullorempty($cald_work['OVTM1_TIME_HH']) ? $cald_work['OVTM1_TIME_HH'] : 0,
                'OVTM1_TIME_MI' => !is_nullorempty($cald_work['OVTM1_TIME_HH']) ? $cald_work['OVTM1_TIME_MI'] : 0,
                'OVTM2_TIME_HH' => !is_nullorempty($cald_work['OVTM2_TIME_HH']) ? $cald_work['OVTM2_TIME_HH'] : 0,
                'OVTM2_TIME_MI' => !is_nullorempty($cald_work['OVTM2_TIME_HH']) ? $cald_work['OVTM2_TIME_MI'] : 0,
                'OVTM3_TIME_HH' => !is_nullorempty($cald_work['OVTM3_TIME_HH']) ? $cald_work['OVTM3_TIME_HH'] : 0,
                'OVTM3_TIME_MI' => !is_nullorempty($cald_work['OVTM3_TIME_HH']) ? $cald_work['OVTM3_TIME_MI'] : 0,
                'OVTM4_TIME_HH' => !is_nullorempty($cald_work['OVTM4_TIME_HH']) ? $cald_work['OVTM4_TIME_HH'] : 0,
                'OVTM4_TIME_MI' => !is_nullorempty($cald_work['OVTM4_TIME_HH']) ? $cald_work['OVTM4_TIME_MI'] : 0,
                'OVTM5_TIME_HH' => !is_nullorempty($cald_work['OVTM5_TIME_HH']) ? $cald_work['OVTM5_TIME_HH'] : 0,
                'OVTM5_TIME_MI' => !is_nullorempty($cald_work['OVTM5_TIME_HH']) ? $cald_work['OVTM5_TIME_MI'] : 0,
                'OVTM6_TIME_HH' => !is_nullorempty($cald_work['OVTM6_TIME_HH']) ? $cald_work['OVTM6_TIME_HH'] : 0,
                'OVTM6_TIME_MI' => !is_nullorempty($cald_work['OVTM6_TIME_HH']) ? $cald_work['OVTM6_TIME_MI'] : 0,
                'OVTM7_TIME_HH' => $cald_work->OVTM7_TIME_HH,
                'OVTM7_TIME_MI' => $cald_work->OVTM7_TIME_MI,
                'OVTM8_TIME_HH' => $cald_work->OVTM8_TIME_HH,
                'OVTM8_TIME_MI' => $cald_work->OVTM8_TIME_MI,
                'OVTM9_TIME_HH' => $cald_work->OVTM9_TIME_HH,
                'OVTM9_TIME_MI' => $cald_work->OVTM9_TIME_MI,
                'OVTM10_TIME_HH' => $cald_work->OVTM10_TIME_HH,
                'OVTM10_TIME_MI' => $cald_work->OVTM10_TIME_MI,
                'EXT1_TIME_HH' => !is_nullorempty($cald_work['EXT1_TIME_HH']) ? $cald_work['EXT1_TIME_HH'] : 0,
                'EXT1_TIME_MI' => !is_nullorempty($cald_work['EXT1_TIME_HH']) ? $cald_work['EXT1_TIME_MI'] : 0,
                'EXT2_TIME_HH' => !is_nullorempty($cald_work['EXT2_TIME_HH']) ? $cald_work['EXT2_TIME_HH'] : 0,
                'EXT2_TIME_MI' => !is_nullorempty($cald_work['EXT2_TIME_HH']) ? $cald_work['EXT2_TIME_MI'] : 0,
                'EXT3_TIME_HH' => !is_nullorempty($cald_work['EXT3_TIME_HH']) ? $cald_work['EXT3_TIME_HH'] : 0,
                'EXT3_TIME_MI' => !is_nullorempty($cald_work['EXT3_TIME_HH']) ? $cald_work['EXT3_TIME_MI'] : 0,
                'EXT4_TIME_HH' => $cald_work->EXT4_TIME_HH,
                'EXT4_TIME_MI' => $cald_work->EXT4_TIME_MI,
                'EXT5_TIME_HH' => $cald_work->EXT5_TIME_HH,
                'EXT5_TIME_MI' => $cald_work->EXT5_TIME_MI,
                'RSV1_TIME_HH' => $cald_work->RSV1_TIME_HH,
                'RSV1_TIME_MI' => $cald_work->RSV1_TIME_MI,
                'RSV2_TIME_HH' => $cald_work->RSV2_TIME_HH,
                'RSV2_TIME_MI' => $cald_work->RSV2_TIME_MI,
                'RSV3_TIME_HH' => $cald_work->RSV3_TIME_HH,
                'RSV3_TIME_MI' => $cald_work->RSV3_TIME_MI,
                'WORKDAY_CNT' => (float) $cald_work->WORKDAY_CNT,
                'HOLWORK_CNT' => (float) $cald_work->HOLWORK_CNT,
                'SPCHOL_CNT' => (float) $cald_work->SPCHOL_CNT,
                'PADHOL_CNT' => (float) $cald_work->PADHOL_CNT,
                'ABCWORK_CNT' => (float) $cald_work->ABCWORK_CNT,
                'COMPDAY_CNT' => (float) $cald_work->COMPDAY_CNT,
                'RSV1_CNT' => (float) $cald_work->RSV1_CNT,
                'RSV2_CNT' => (float) $cald_work->RSV2_CNT,
                'RSV3_CNT' => (float) $cald_work->RSV3_CNT,
                'UPD_CLS_CD' => '01',
                'FIX_CLS_CD' => $cald_work->FIX_CLS_CD,
                'RSV1_CLS_CD' => $cald_work->RSV1_CLS_CD,
                'RSV2_CLS_CD' => $cald_work->RSV2_CLS_CD,
                'ADD_DATE' => $today,
                'UPD_DATE' => $today,
                'REMARK' => $cald_work['REMARK'] ?? "",
                'SUBHOL_CNT' => (float) $cald_work->SUBHOL_CNT,
                'SUBWORK_CNT' => (float) $cald_work->SUBWORK_CNT
            ];
            // 10件ごとの2次元配列にして、10件ごとに登録する。
            $update_records[floor($index / 10)][] = $record;

            // 前日の終了時間を更新
            $this->tr01->updateWithKey(
                $tr01_record->EMP_CD,
                (new Carbon($data['CALD_DATE']))->subDay(),
                [
                    'WORKPTN_END_TIME' => $tr01_record->WORKPTN_STR_TIME,
                    'UPD_DATE' => $today,
                ]
            );
        }
        foreach ($update_records as $record) {
            TR01Work::upsert($record, ['EMP_CD', 'CALD_DATE'], $this->udpateCols());
        }
        return ;
    }

    private function udpateCols()
    {
        return [
            'WORKPTN_CD',
            'WORKPTN_STR_TIME',
            'WORKPTN_END_TIME',
            'REASON_CD',
            'OFC_TIME_HH',
            'OFC_TIME_MI',
            'OFC_CNT',
            'LEV_TIME_HH',
            'LEV_TIME_MI',
            'LEV_CNT',
            'OUT1_TIME_HH',
            'OUT1_TIME_MI',
            'OUT1_CNT',
            'IN1_TIME_HH',
            'IN1_TIME_MI',
            'IN1_CNT',
            'OUT2_TIME_HH',
            'OUT2_TIME_MI',
            'OUT2_CNT',
            'IN2_TIME_HH',
            'IN2_TIME_MI',
            'IN2_CNT',
            'WORK_TIME_HH',
            'WORK_TIME_MI',
            'TARD_TIME_HH',
            'TARD_TIME_MI',
            'LEAVE_TIME_HH',
            'LEAVE_TIME_MI',
            'OUT_TIME_HH',
            'OUT_TIME_MI',
            'OVTM1_TIME_HH',
            'OVTM1_TIME_MI',
            'OVTM2_TIME_HH',
            'OVTM2_TIME_MI',
            'OVTM3_TIME_HH',
            'OVTM3_TIME_MI',
            'OVTM4_TIME_HH',
            'OVTM4_TIME_MI',
            'OVTM5_TIME_HH',
            'OVTM5_TIME_MI',
            'OVTM6_TIME_HH',
            'OVTM6_TIME_MI',
            'OVTM7_TIME_HH',
            'OVTM7_TIME_MI',
            'OVTM8_TIME_HH',
            'OVTM8_TIME_MI',
            'OVTM9_TIME_HH',
            'OVTM9_TIME_MI',
            'OVTM10_TIME_HH',
            'OVTM10_TIME_MI',
            'EXT1_TIME_HH',
            'EXT1_TIME_MI',
            'EXT2_TIME_HH',
            'EXT2_TIME_MI',
            'EXT3_TIME_HH',
            'EXT3_TIME_MI',
            'EXT4_TIME_HH',
            'EXT4_TIME_MI',
            'EXT5_TIME_HH',
            'EXT5_TIME_MI',
            'RSV1_TIME_HH',
            'RSV1_TIME_MI',
            'RSV2_TIME_HH',
            'RSV2_TIME_MI',
            'RSV3_TIME_HH',
            'RSV3_TIME_MI',
            'WORKDAY_CNT',
            'HOLWORK_CNT',
            'SPCHOL_CNT',
            'PADHOL_CNT',
            'ABCWORK_CNT',
            'COMPDAY_CNT',
            'RSV1_CNT',
            'RSV2_CNT',
            'RSV3_CNT',
            'UPD_CLS_CD',
            'FIX_CLS_CD',
            'RSV1_CLS_CD',
            'RSV2_CLS_CD',
            'ADD_DATE',
            'UPD_DATE',
            'REMARK',
            'SUBHOL_CNT',
            'SUBWORK_CNT'
        ];
    }

    public function cancel(Request $request)
    {
        $data = $request->session()->all();

        if (!empty($data['dept_cd'])) {
            $request->session()->forget('dept_cd');
        }
        if (!empty($data['ymd_date'])) {
            return redirect()->back()->with('ymd_date', $data['ymd_date']);
        } else {
            return redirect()->back();
        }
    }
}
